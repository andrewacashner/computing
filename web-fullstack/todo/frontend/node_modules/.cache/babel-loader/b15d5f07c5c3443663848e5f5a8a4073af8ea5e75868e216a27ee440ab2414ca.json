{"ast":null,"code":"'use strict';\n\nvar classChecks = require('../../common/var/classChecks'),\n  rangeIsValid = require('./rangeIsValid'),\n  incrementDate = require('./incrementDate'),\n  incrementNumber = require('./incrementNumber'),\n  incrementString = require('./incrementString'),\n  getGreaterPrecision = require('./getGreaterPrecision'),\n  getDateIncrementObject = require('./getDateIncrementObject');\nvar isNumber = classChecks.isNumber,\n  isString = classChecks.isString,\n  isDate = classChecks.isDate,\n  isFunction = classChecks.isFunction;\nfunction rangeEvery(range, step, countOnly, fn) {\n  var increment,\n    precision,\n    dio,\n    unit,\n    start = range.start,\n    end = range.end,\n    inverse = end < start,\n    current = start,\n    index = 0,\n    result = [];\n  if (!rangeIsValid(range)) {\n    return countOnly ? NaN : [];\n  }\n  if (isFunction(step)) {\n    fn = step;\n    step = null;\n  }\n  step = step || 1;\n  if (isNumber(start)) {\n    precision = getGreaterPrecision(start, step);\n    increment = function () {\n      return incrementNumber(current, step, precision);\n    };\n  } else if (isString(start)) {\n    increment = function () {\n      return incrementString(current, step);\n    };\n  } else if (isDate(start)) {\n    dio = getDateIncrementObject(step);\n    step = dio[0];\n    unit = dio[1];\n    increment = function () {\n      return incrementDate(current, step, unit);\n    };\n  }\n  // Avoiding infinite loops\n  if (inverse && step > 0) {\n    step *= -1;\n  }\n  while (inverse ? current >= end : current <= end) {\n    if (!countOnly) {\n      result.push(current);\n    }\n    if (fn) {\n      fn(current, index, range);\n    }\n    current = increment();\n    index++;\n  }\n  return countOnly ? index - 1 : result;\n}\nmodule.exports = rangeEvery;","map":{"version":3,"names":["classChecks","require","rangeIsValid","incrementDate","incrementNumber","incrementString","getGreaterPrecision","getDateIncrementObject","isNumber","isString","isDate","isFunction","rangeEvery","range","step","countOnly","fn","increment","precision","dio","unit","start","end","inverse","current","index","result","NaN","push","module","exports"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/todo/node_modules/sugar-date/range/internal/rangeEvery.js"],"sourcesContent":["'use strict';\n\nvar classChecks = require('../../common/var/classChecks'),\n    rangeIsValid = require('./rangeIsValid'),\n    incrementDate = require('./incrementDate'),\n    incrementNumber = require('./incrementNumber'),\n    incrementString = require('./incrementString'),\n    getGreaterPrecision = require('./getGreaterPrecision'),\n    getDateIncrementObject = require('./getDateIncrementObject');\n\nvar isNumber = classChecks.isNumber,\n    isString = classChecks.isString,\n    isDate = classChecks.isDate,\n    isFunction = classChecks.isFunction;\n\nfunction rangeEvery(range, step, countOnly, fn) {\n  var increment,\n      precision,\n      dio,\n      unit,\n      start   = range.start,\n      end     = range.end,\n      inverse = end < start,\n      current = start,\n      index   = 0,\n      result  = [];\n\n  if (!rangeIsValid(range)) {\n    return countOnly ? NaN : [];\n  }\n  if (isFunction(step)) {\n    fn = step;\n    step = null;\n  }\n  step = step || 1;\n  if (isNumber(start)) {\n    precision = getGreaterPrecision(start, step);\n    increment = function() {\n      return incrementNumber(current, step, precision);\n    };\n  } else if (isString(start)) {\n    increment = function() {\n      return incrementString(current, step);\n    };\n  } else if (isDate(start)) {\n    dio  = getDateIncrementObject(step);\n    step = dio[0];\n    unit = dio[1];\n    increment = function() {\n      return incrementDate(current, step, unit);\n    };\n  }\n  // Avoiding infinite loops\n  if (inverse && step > 0) {\n    step *= -1;\n  }\n  while(inverse ? current >= end : current <= end) {\n    if (!countOnly) {\n      result.push(current);\n    }\n    if (fn) {\n      fn(current, index, range);\n    }\n    current = increment();\n    index++;\n  }\n  return countOnly ? index - 1 : result;\n}\n\nmodule.exports = rangeEvery;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,8BAA8B,CAAC;EACrDC,YAAY,GAAGD,OAAO,CAAC,gBAAgB,CAAC;EACxCE,aAAa,GAAGF,OAAO,CAAC,iBAAiB,CAAC;EAC1CG,eAAe,GAAGH,OAAO,CAAC,mBAAmB,CAAC;EAC9CI,eAAe,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;EAC9CK,mBAAmB,GAAGL,OAAO,CAAC,uBAAuB,CAAC;EACtDM,sBAAsB,GAAGN,OAAO,CAAC,0BAA0B,CAAC;AAEhE,IAAIO,QAAQ,GAAGR,WAAW,CAACQ,QAAQ;EAC/BC,QAAQ,GAAGT,WAAW,CAACS,QAAQ;EAC/BC,MAAM,GAAGV,WAAW,CAACU,MAAM;EAC3BC,UAAU,GAAGX,WAAW,CAACW,UAAU;AAEvC,SAASC,UAAUA,CAACC,KAAK,EAAEC,IAAI,EAAEC,SAAS,EAAEC,EAAE,EAAE;EAC9C,IAAIC,SAAS;IACTC,SAAS;IACTC,GAAG;IACHC,IAAI;IACJC,KAAK,GAAKR,KAAK,CAACQ,KAAK;IACrBC,GAAG,GAAOT,KAAK,CAACS,GAAG;IACnBC,OAAO,GAAGD,GAAG,GAAGD,KAAK;IACrBG,OAAO,GAAGH,KAAK;IACfI,KAAK,GAAK,CAAC;IACXC,MAAM,GAAI,EAAE;EAEhB,IAAI,CAACxB,YAAY,CAACW,KAAK,CAAC,EAAE;IACxB,OAAOE,SAAS,GAAGY,GAAG,GAAG,EAAE;EAC7B;EACA,IAAIhB,UAAU,CAACG,IAAI,CAAC,EAAE;IACpBE,EAAE,GAAGF,IAAI;IACTA,IAAI,GAAG,IAAI;EACb;EACAA,IAAI,GAAGA,IAAI,IAAI,CAAC;EAChB,IAAIN,QAAQ,CAACa,KAAK,CAAC,EAAE;IACnBH,SAAS,GAAGZ,mBAAmB,CAACe,KAAK,EAAEP,IAAI,CAAC;IAC5CG,SAAS,GAAG,SAAAA,CAAA,EAAW;MACrB,OAAOb,eAAe,CAACoB,OAAO,EAAEV,IAAI,EAAEI,SAAS,CAAC;IAClD,CAAC;EACH,CAAC,MAAM,IAAIT,QAAQ,CAACY,KAAK,CAAC,EAAE;IAC1BJ,SAAS,GAAG,SAAAA,CAAA,EAAW;MACrB,OAAOZ,eAAe,CAACmB,OAAO,EAAEV,IAAI,CAAC;IACvC,CAAC;EACH,CAAC,MAAM,IAAIJ,MAAM,CAACW,KAAK,CAAC,EAAE;IACxBF,GAAG,GAAIZ,sBAAsB,CAACO,IAAI,CAAC;IACnCA,IAAI,GAAGK,GAAG,CAAC,CAAC,CAAC;IACbC,IAAI,GAAGD,GAAG,CAAC,CAAC,CAAC;IACbF,SAAS,GAAG,SAAAA,CAAA,EAAW;MACrB,OAAOd,aAAa,CAACqB,OAAO,EAAEV,IAAI,EAAEM,IAAI,CAAC;IAC3C,CAAC;EACH;EACA;EACA,IAAIG,OAAO,IAAIT,IAAI,GAAG,CAAC,EAAE;IACvBA,IAAI,IAAI,CAAC,CAAC;EACZ;EACA,OAAMS,OAAO,GAAGC,OAAO,IAAIF,GAAG,GAAGE,OAAO,IAAIF,GAAG,EAAE;IAC/C,IAAI,CAACP,SAAS,EAAE;MACdW,MAAM,CAACE,IAAI,CAACJ,OAAO,CAAC;IACtB;IACA,IAAIR,EAAE,EAAE;MACNA,EAAE,CAACQ,OAAO,EAAEC,KAAK,EAAEZ,KAAK,CAAC;IAC3B;IACAW,OAAO,GAAGP,SAAS,CAAC,CAAC;IACrBQ,KAAK,EAAE;EACT;EACA,OAAOV,SAAS,GAAGU,KAAK,GAAG,CAAC,GAAGC,MAAM;AACvC;AAEAG,MAAM,CAACC,OAAO,GAAGlB,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}