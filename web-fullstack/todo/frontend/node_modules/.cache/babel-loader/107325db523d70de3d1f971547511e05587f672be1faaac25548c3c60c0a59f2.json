{"ast":null,"code":"'use strict';\n\nvar LocaleHelpers = require('../var/LocaleHelpers'),\n  dateFormat = require('./dateFormat'),\n  classChecks = require('../../common/var/classChecks'),\n  assertDateIsValid = require('./assertDateIsValid'),\n  getAdjustedUnitForDate = require('./getAdjustedUnitForDate');\nvar isFunction = classChecks.isFunction,\n  localeManager = LocaleHelpers.localeManager;\nfunction dateRelative(d, dRelative, arg1, arg2) {\n  var adu, format, type, localeCode, fn;\n  assertDateIsValid(d);\n  if (isFunction(arg1)) {\n    fn = arg1;\n  } else {\n    localeCode = arg1;\n    fn = arg2;\n  }\n  adu = getAdjustedUnitForDate(d, dRelative);\n  if (fn) {\n    format = fn.apply(d, adu.concat(localeManager.get(localeCode)));\n    if (format) {\n      return dateFormat(d, format, localeCode);\n    }\n  }\n  // Adjust up if time is in ms, as this doesn't\n  // look very good for a standard relative date.\n  if (adu[1] === 0) {\n    adu[1] = 1;\n    adu[0] = 1;\n  }\n  if (dRelative) {\n    type = 'duration';\n  } else if (adu[2] > 0) {\n    type = 'future';\n  } else {\n    type = 'past';\n  }\n  return localeManager.get(localeCode).getRelativeFormat(adu, type);\n}\nmodule.exports = dateRelative;","map":{"version":3,"names":["LocaleHelpers","require","dateFormat","classChecks","assertDateIsValid","getAdjustedUnitForDate","isFunction","localeManager","dateRelative","d","dRelative","arg1","arg2","adu","format","type","localeCode","fn","apply","concat","get","getRelativeFormat","module","exports"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/todo/node_modules/sugar-date/date/internal/dateRelative.js"],"sourcesContent":["'use strict';\n\nvar LocaleHelpers = require('../var/LocaleHelpers'),\n    dateFormat = require('./dateFormat'),\n    classChecks = require('../../common/var/classChecks'),\n    assertDateIsValid = require('./assertDateIsValid'),\n    getAdjustedUnitForDate = require('./getAdjustedUnitForDate');\n\nvar isFunction = classChecks.isFunction,\n    localeManager = LocaleHelpers.localeManager;\n\nfunction dateRelative(d, dRelative, arg1, arg2) {\n  var adu, format, type, localeCode, fn;\n  assertDateIsValid(d);\n  if (isFunction(arg1)) {\n    fn = arg1;\n  } else {\n    localeCode = arg1;\n    fn = arg2;\n  }\n  adu = getAdjustedUnitForDate(d, dRelative);\n  if (fn) {\n    format = fn.apply(d, adu.concat(localeManager.get(localeCode)));\n    if (format) {\n      return dateFormat(d, format, localeCode);\n    }\n  }\n  // Adjust up if time is in ms, as this doesn't\n  // look very good for a standard relative date.\n  if (adu[1] === 0) {\n    adu[1] = 1;\n    adu[0] = 1;\n  }\n  if (dRelative) {\n    type = 'duration';\n  } else if (adu[2] > 0) {\n    type = 'future';\n  } else {\n    type = 'past';\n  }\n  return localeManager.get(localeCode).getRelativeFormat(adu, type);\n}\n\nmodule.exports = dateRelative;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,aAAa,GAAGC,OAAO,CAAC,sBAAsB,CAAC;EAC/CC,UAAU,GAAGD,OAAO,CAAC,cAAc,CAAC;EACpCE,WAAW,GAAGF,OAAO,CAAC,8BAA8B,CAAC;EACrDG,iBAAiB,GAAGH,OAAO,CAAC,qBAAqB,CAAC;EAClDI,sBAAsB,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;AAEhE,IAAIK,UAAU,GAAGH,WAAW,CAACG,UAAU;EACnCC,aAAa,GAAGP,aAAa,CAACO,aAAa;AAE/C,SAASC,YAAYA,CAACC,CAAC,EAAEC,SAAS,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC9C,IAAIC,GAAG,EAAEC,MAAM,EAAEC,IAAI,EAAEC,UAAU,EAAEC,EAAE;EACrCb,iBAAiB,CAACK,CAAC,CAAC;EACpB,IAAIH,UAAU,CAACK,IAAI,CAAC,EAAE;IACpBM,EAAE,GAAGN,IAAI;EACX,CAAC,MAAM;IACLK,UAAU,GAAGL,IAAI;IACjBM,EAAE,GAAGL,IAAI;EACX;EACAC,GAAG,GAAGR,sBAAsB,CAACI,CAAC,EAAEC,SAAS,CAAC;EAC1C,IAAIO,EAAE,EAAE;IACNH,MAAM,GAAGG,EAAE,CAACC,KAAK,CAACT,CAAC,EAAEI,GAAG,CAACM,MAAM,CAACZ,aAAa,CAACa,GAAG,CAACJ,UAAU,CAAC,CAAC,CAAC;IAC/D,IAAIF,MAAM,EAAE;MACV,OAAOZ,UAAU,CAACO,CAAC,EAAEK,MAAM,EAAEE,UAAU,CAAC;IAC1C;EACF;EACA;EACA;EACA,IAAIH,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;IAChBA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACVA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;EACZ;EACA,IAAIH,SAAS,EAAE;IACbK,IAAI,GAAG,UAAU;EACnB,CAAC,MAAM,IAAIF,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;IACrBE,IAAI,GAAG,QAAQ;EACjB,CAAC,MAAM;IACLA,IAAI,GAAG,MAAM;EACf;EACA,OAAOR,aAAa,CAACa,GAAG,CAACJ,UAAU,CAAC,CAACK,iBAAiB,CAACR,GAAG,EAAEE,IAAI,CAAC;AACnE;AAEAO,MAAM,CAACC,OAAO,GAAGf,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}