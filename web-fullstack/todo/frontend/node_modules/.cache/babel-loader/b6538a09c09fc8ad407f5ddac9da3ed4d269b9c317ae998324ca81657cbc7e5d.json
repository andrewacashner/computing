{"ast":null,"code":"'use strict';\n\nvar MINUTES = require('../var/MINUTES'),\n  DateUnits = require('../var/DateUnits'),\n  DateUnitIndexes = require('../var/DateUnitIndexes'),\n  _utc = require('../../common/var/_utc'),\n  tzOffset = require('./tzOffset'),\n  cloneDate = require('./cloneDate'),\n  isDefined = require('../../common/internal/isDefined'),\n  advanceDate = require('./advanceDate'),\n  dateIsValid = require('./dateIsValid'),\n  moveToEndOfUnit = require('./moveToEndOfUnit'),\n  getExtendedDate = require('./getExtendedDate'),\n  moveToBeginningOfUnit = require('./moveToBeginningOfUnit');\nvar MONTH_INDEX = DateUnitIndexes.MONTH_INDEX;\nfunction compareDate(date, d, margin, localeCode, options) {\n  var loMargin = 0,\n    hiMargin = 0,\n    timezoneShift,\n    compareEdges,\n    override,\n    min,\n    max,\n    p,\n    t;\n  function getTimezoneShift() {\n    // If there is any specificity in the date then we're implicitly not\n    // checking absolute time, so ignore timezone shifts.\n    if (p.set && p.set.specificity) {\n      return 0;\n    }\n    return (tzOffset(p.date) - tzOffset(date)) * MINUTES;\n  }\n  function addSpecificUnit() {\n    var unit = DateUnits[p.set.specificity];\n    return advanceDate(cloneDate(p.date), unit.name, 1).getTime() - 1;\n  }\n  if (_utc(date)) {\n    options = options || {};\n    options.fromUTC = true;\n    options.setUTC = true;\n  }\n  p = getExtendedDate(null, d, options, true);\n  if (margin > 0) {\n    loMargin = hiMargin = margin;\n    override = true;\n  }\n  if (!dateIsValid(p.date)) return false;\n  if (p.set && p.set.specificity) {\n    if (isDefined(p.set.edge) || isDefined(p.set.shift)) {\n      compareEdges = true;\n      moveToBeginningOfUnit(p.date, p.set.specificity, localeCode);\n    }\n    if (compareEdges || p.set.specificity === MONTH_INDEX) {\n      max = moveToEndOfUnit(cloneDate(p.date), p.set.specificity, localeCode).getTime();\n    } else {\n      max = addSpecificUnit();\n    }\n    if (!override && isDefined(p.set.sign) && p.set.specificity) {\n      // If the time is relative, there can occasionally be an disparity between\n      // the relative date and \"now\", which it is being compared to, so set an\n      // extra margin to account for this.\n      loMargin = 50;\n      hiMargin = -50;\n    }\n  }\n  t = date.getTime();\n  min = p.date.getTime();\n  max = max || min;\n  timezoneShift = getTimezoneShift();\n  // istanbul ignore if\n  if (timezoneShift) {\n    min -= timezoneShift;\n    max -= timezoneShift;\n  }\n  return t >= min - loMargin && t <= max + hiMargin;\n}\nmodule.exports = compareDate;","map":{"version":3,"names":["MINUTES","require","DateUnits","DateUnitIndexes","_utc","tzOffset","cloneDate","isDefined","advanceDate","dateIsValid","moveToEndOfUnit","getExtendedDate","moveToBeginningOfUnit","MONTH_INDEX","compareDate","date","d","margin","localeCode","options","loMargin","hiMargin","timezoneShift","compareEdges","override","min","max","p","t","getTimezoneShift","set","specificity","addSpecificUnit","unit","name","getTime","fromUTC","setUTC","edge","shift","sign","module","exports"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/todo/node_modules/sugar-date/date/internal/compareDate.js"],"sourcesContent":["'use strict';\n\nvar MINUTES = require('../var/MINUTES'),\n    DateUnits = require('../var/DateUnits'),\n    DateUnitIndexes = require('../var/DateUnitIndexes'),\n    _utc = require('../../common/var/_utc'),\n    tzOffset = require('./tzOffset'),\n    cloneDate = require('./cloneDate'),\n    isDefined = require('../../common/internal/isDefined'),\n    advanceDate = require('./advanceDate'),\n    dateIsValid = require('./dateIsValid'),\n    moveToEndOfUnit = require('./moveToEndOfUnit'),\n    getExtendedDate = require('./getExtendedDate'),\n    moveToBeginningOfUnit = require('./moveToBeginningOfUnit');\n\nvar MONTH_INDEX = DateUnitIndexes.MONTH_INDEX;\n\nfunction compareDate(date, d, margin, localeCode, options) {\n  var loMargin = 0, hiMargin = 0, timezoneShift, compareEdges, override, min, max, p, t;\n\n  function getTimezoneShift() {\n    // If there is any specificity in the date then we're implicitly not\n    // checking absolute time, so ignore timezone shifts.\n    if (p.set && p.set.specificity) {\n      return 0;\n    }\n    return (tzOffset(p.date) - tzOffset(date)) * MINUTES;\n  }\n\n  function addSpecificUnit() {\n    var unit = DateUnits[p.set.specificity];\n    return advanceDate(cloneDate(p.date), unit.name, 1).getTime() - 1;\n  }\n\n  if (_utc(date)) {\n    options = options || {};\n    options.fromUTC = true;\n    options.setUTC = true;\n  }\n\n  p = getExtendedDate(null, d, options, true);\n\n  if (margin > 0) {\n    loMargin = hiMargin = margin;\n    override = true;\n  }\n  if (!dateIsValid(p.date)) return false;\n  if (p.set && p.set.specificity) {\n    if (isDefined(p.set.edge) || isDefined(p.set.shift)) {\n      compareEdges = true;\n      moveToBeginningOfUnit(p.date, p.set.specificity, localeCode);\n    }\n    if (compareEdges || p.set.specificity === MONTH_INDEX) {\n      max = moveToEndOfUnit(cloneDate(p.date), p.set.specificity, localeCode).getTime();\n    } else {\n      max = addSpecificUnit();\n    }\n    if (!override && isDefined(p.set.sign) && p.set.specificity) {\n      // If the time is relative, there can occasionally be an disparity between\n      // the relative date and \"now\", which it is being compared to, so set an\n      // extra margin to account for this.\n      loMargin = 50;\n      hiMargin = -50;\n    }\n  }\n  t   = date.getTime();\n  min = p.date.getTime();\n  max = max || min;\n  timezoneShift = getTimezoneShift();\n  // istanbul ignore if\n  if (timezoneShift) {\n    min -= timezoneShift;\n    max -= timezoneShift;\n  }\n  return t >= (min - loMargin) && t <= (max + hiMargin);\n}\n\nmodule.exports = compareDate;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAgB,CAAC;EACnCC,SAAS,GAAGD,OAAO,CAAC,kBAAkB,CAAC;EACvCE,eAAe,GAAGF,OAAO,CAAC,wBAAwB,CAAC;EACnDG,IAAI,GAAGH,OAAO,CAAC,uBAAuB,CAAC;EACvCI,QAAQ,GAAGJ,OAAO,CAAC,YAAY,CAAC;EAChCK,SAAS,GAAGL,OAAO,CAAC,aAAa,CAAC;EAClCM,SAAS,GAAGN,OAAO,CAAC,iCAAiC,CAAC;EACtDO,WAAW,GAAGP,OAAO,CAAC,eAAe,CAAC;EACtCQ,WAAW,GAAGR,OAAO,CAAC,eAAe,CAAC;EACtCS,eAAe,GAAGT,OAAO,CAAC,mBAAmB,CAAC;EAC9CU,eAAe,GAAGV,OAAO,CAAC,mBAAmB,CAAC;EAC9CW,qBAAqB,GAAGX,OAAO,CAAC,yBAAyB,CAAC;AAE9D,IAAIY,WAAW,GAAGV,eAAe,CAACU,WAAW;AAE7C,SAASC,WAAWA,CAACC,IAAI,EAAEC,CAAC,EAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAE;EACzD,IAAIC,QAAQ,GAAG,CAAC;IAAEC,QAAQ,GAAG,CAAC;IAAEC,aAAa;IAAEC,YAAY;IAAEC,QAAQ;IAAEC,GAAG;IAAEC,GAAG;IAAEC,CAAC;IAAEC,CAAC;EAErF,SAASC,gBAAgBA,CAAA,EAAG;IAC1B;IACA;IACA,IAAIF,CAAC,CAACG,GAAG,IAAIH,CAAC,CAACG,GAAG,CAACC,WAAW,EAAE;MAC9B,OAAO,CAAC;IACV;IACA,OAAO,CAAC1B,QAAQ,CAACsB,CAAC,CAACZ,IAAI,CAAC,GAAGV,QAAQ,CAACU,IAAI,CAAC,IAAIf,OAAO;EACtD;EAEA,SAASgC,eAAeA,CAAA,EAAG;IACzB,IAAIC,IAAI,GAAG/B,SAAS,CAACyB,CAAC,CAACG,GAAG,CAACC,WAAW,CAAC;IACvC,OAAOvB,WAAW,CAACF,SAAS,CAACqB,CAAC,CAACZ,IAAI,CAAC,EAAEkB,IAAI,CAACC,IAAI,EAAE,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,CAAC;EACnE;EAEA,IAAI/B,IAAI,CAACW,IAAI,CAAC,EAAE;IACdI,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBA,OAAO,CAACiB,OAAO,GAAG,IAAI;IACtBjB,OAAO,CAACkB,MAAM,GAAG,IAAI;EACvB;EAEAV,CAAC,GAAGhB,eAAe,CAAC,IAAI,EAAEK,CAAC,EAAEG,OAAO,EAAE,IAAI,CAAC;EAE3C,IAAIF,MAAM,GAAG,CAAC,EAAE;IACdG,QAAQ,GAAGC,QAAQ,GAAGJ,MAAM;IAC5BO,QAAQ,GAAG,IAAI;EACjB;EACA,IAAI,CAACf,WAAW,CAACkB,CAAC,CAACZ,IAAI,CAAC,EAAE,OAAO,KAAK;EACtC,IAAIY,CAAC,CAACG,GAAG,IAAIH,CAAC,CAACG,GAAG,CAACC,WAAW,EAAE;IAC9B,IAAIxB,SAAS,CAACoB,CAAC,CAACG,GAAG,CAACQ,IAAI,CAAC,IAAI/B,SAAS,CAACoB,CAAC,CAACG,GAAG,CAACS,KAAK,CAAC,EAAE;MACnDhB,YAAY,GAAG,IAAI;MACnBX,qBAAqB,CAACe,CAAC,CAACZ,IAAI,EAAEY,CAAC,CAACG,GAAG,CAACC,WAAW,EAAEb,UAAU,CAAC;IAC9D;IACA,IAAIK,YAAY,IAAII,CAAC,CAACG,GAAG,CAACC,WAAW,KAAKlB,WAAW,EAAE;MACrDa,GAAG,GAAGhB,eAAe,CAACJ,SAAS,CAACqB,CAAC,CAACZ,IAAI,CAAC,EAAEY,CAAC,CAACG,GAAG,CAACC,WAAW,EAAEb,UAAU,CAAC,CAACiB,OAAO,CAAC,CAAC;IACnF,CAAC,MAAM;MACLT,GAAG,GAAGM,eAAe,CAAC,CAAC;IACzB;IACA,IAAI,CAACR,QAAQ,IAAIjB,SAAS,CAACoB,CAAC,CAACG,GAAG,CAACU,IAAI,CAAC,IAAIb,CAAC,CAACG,GAAG,CAACC,WAAW,EAAE;MAC3D;MACA;MACA;MACAX,QAAQ,GAAG,EAAE;MACbC,QAAQ,GAAG,CAAC,EAAE;IAChB;EACF;EACAO,CAAC,GAAKb,IAAI,CAACoB,OAAO,CAAC,CAAC;EACpBV,GAAG,GAAGE,CAAC,CAACZ,IAAI,CAACoB,OAAO,CAAC,CAAC;EACtBT,GAAG,GAAGA,GAAG,IAAID,GAAG;EAChBH,aAAa,GAAGO,gBAAgB,CAAC,CAAC;EAClC;EACA,IAAIP,aAAa,EAAE;IACjBG,GAAG,IAAIH,aAAa;IACpBI,GAAG,IAAIJ,aAAa;EACtB;EACA,OAAOM,CAAC,IAAKH,GAAG,GAAGL,QAAS,IAAIQ,CAAC,IAAKF,GAAG,GAAGL,QAAS;AACvD;AAEAoB,MAAM,CAACC,OAAO,GAAG5B,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}