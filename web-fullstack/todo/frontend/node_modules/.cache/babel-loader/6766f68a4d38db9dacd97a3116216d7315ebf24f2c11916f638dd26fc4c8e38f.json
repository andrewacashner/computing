{"ast":null,"code":"'use strict';\n\nvar getNewDate = require('./getNewDate'),\n  mathAliases = require('../../common/var/mathAliases'),\n  getAdjustedUnit = require('./getAdjustedUnit'),\n  getTimeDistanceForUnit = require('./getTimeDistanceForUnit');\nvar abs = mathAliases.abs;\nfunction getAdjustedUnitForDate(d, dRelative) {\n  var ms;\n  if (!dRelative) {\n    dRelative = getNewDate();\n    if (d > dRelative) {\n      // If our date is greater than the one that we got from getNewDate, it\n      // means that we are finding the unit for a date that is in the future\n      // relative to now. However, often the incoming date was created in\n      // the same cycle as our comparison, but our \"now\" date will have been\n      // created an instant after it, creating situations where \"5 minutes from\n      // now\" becomes \"4 minutes from now\" in the same tick. To prevent this,\n      // subtract a buffer of 10ms to compensate.\n      dRelative = new Date(dRelative.getTime() - 10);\n    }\n  }\n  ms = d - dRelative;\n  return getAdjustedUnit(ms, function (u) {\n    return abs(getTimeDistanceForUnit(d, dRelative, u));\n  });\n}\nmodule.exports = getAdjustedUnitForDate;","map":{"version":3,"names":["getNewDate","require","mathAliases","getAdjustedUnit","getTimeDistanceForUnit","abs","getAdjustedUnitForDate","d","dRelative","ms","Date","getTime","u","module","exports"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/todo/node_modules/sugar-date/date/internal/getAdjustedUnitForDate.js"],"sourcesContent":["'use strict';\n\nvar getNewDate = require('./getNewDate'),\n    mathAliases = require('../../common/var/mathAliases'),\n    getAdjustedUnit = require('./getAdjustedUnit'),\n    getTimeDistanceForUnit = require('./getTimeDistanceForUnit');\n\nvar abs = mathAliases.abs;\n\nfunction getAdjustedUnitForDate(d, dRelative) {\n  var ms;\n  if (!dRelative) {\n    dRelative = getNewDate();\n    if (d > dRelative) {\n      // If our date is greater than the one that we got from getNewDate, it\n      // means that we are finding the unit for a date that is in the future\n      // relative to now. However, often the incoming date was created in\n      // the same cycle as our comparison, but our \"now\" date will have been\n      // created an instant after it, creating situations where \"5 minutes from\n      // now\" becomes \"4 minutes from now\" in the same tick. To prevent this,\n      // subtract a buffer of 10ms to compensate.\n      dRelative = new Date(dRelative.getTime() - 10);\n    }\n  }\n  ms = d - dRelative;\n  return getAdjustedUnit(ms, function(u) {\n    return abs(getTimeDistanceForUnit(d, dRelative, u));\n  });\n}\n\nmodule.exports = getAdjustedUnitForDate;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;EACpCC,WAAW,GAAGD,OAAO,CAAC,8BAA8B,CAAC;EACrDE,eAAe,GAAGF,OAAO,CAAC,mBAAmB,CAAC;EAC9CG,sBAAsB,GAAGH,OAAO,CAAC,0BAA0B,CAAC;AAEhE,IAAII,GAAG,GAAGH,WAAW,CAACG,GAAG;AAEzB,SAASC,sBAAsBA,CAACC,CAAC,EAAEC,SAAS,EAAE;EAC5C,IAAIC,EAAE;EACN,IAAI,CAACD,SAAS,EAAE;IACdA,SAAS,GAAGR,UAAU,CAAC,CAAC;IACxB,IAAIO,CAAC,GAAGC,SAAS,EAAE;MACjB;MACA;MACA;MACA;MACA;MACA;MACA;MACAA,SAAS,GAAG,IAAIE,IAAI,CAACF,SAAS,CAACG,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;IAChD;EACF;EACAF,EAAE,GAAGF,CAAC,GAAGC,SAAS;EAClB,OAAOL,eAAe,CAACM,EAAE,EAAE,UAASG,CAAC,EAAE;IACrC,OAAOP,GAAG,CAACD,sBAAsB,CAACG,CAAC,EAAEC,SAAS,EAAEI,CAAC,CAAC,CAAC;EACrD,CAAC,CAAC;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAGR,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}