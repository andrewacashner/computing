{"ast":null,"code":"import ToDoItem from \"./ToDoItem\";\nexport default class ToDoList {\n  constructor(...list) {\n    this.items = [list];\n  }\n  toSortedByDate() {\n    let [deadlines, noDeadlines] = Utilities.partition(this.items, i => i.deadline !== null);\n    let [dates, noDates] = Utilities.partition(deadlines, i => i.deadlineDate !== null);\n    let datesSorted = dates.toSorted((a, b) => a.deadlineDate - b.deadlineDate);\n    function stringCompareFn(a, b) {\n      [a, b] = [a, b].map(i => i.toLowerCase());\n      if (a < b) return -1;else if (a > b) return 1;else return 0;\n    }\n    let noDatesSorted = noDates.toSorted((a, b) => stringCompareFn(a.deadline, b.deadline));\n    let noDeadlinesSorted = noDeadlines.toSorted((a, b) => stringCompareFn(a.task, b.task));\n    let newItems = [...noDeadlinesSorted, ...noDatesSorted, ...datesSorted];\n    return new ToDoList(newItems);\n  }\n  isSorted() {\n    let sorted = this.toSortedByDate();\n    let compared = this.items.map((item, index) => item === sorted[index]);\n    let tested = compared.every(i => i === true);\n    return tested;\n  }\n  append(item) {\n    return new ToDoList([...this.items, item]);\n  }\n  moveWithinArray(fromID, toID) {\n    console.log(`Move from item ${fromID} to item ${toID}`);\n    function insertBefore(array, matchFn, item) {\n      let insertPoint = array.findIndex(matchFn);\n      let before = array.slice(0, insertPoint);\n      let after = array.slice(insertPoint);\n      return [...before, item, ...after];\n    }\n    let itemToMove = this.items.find(i => i.id === fromID);\n    let rest = this.filter(i => i !== itemToMove);\n    let newItems = [];\n    if (toID === \"bottom\") {\n      console.log(\"Move item to bottom\");\n      newItems = [...rest, itemToMove];\n    } else {\n      console.log(\"Insert item\");\n      newItems = insertBefore(rest, i => i.id === toID, itemToMove);\n    }\n    return new ToDoList(newItems);\n  }\n  toggleDoneStatus(item) {\n    let toggledItem = item.toggled();\n    console.log(`Marking item as ${toggledItem.doneStatus}`);\n    let items = this.items;\n    let split = items.indexOf(item);\n    let before = items.slice(0, split);\n    let after = items.slice(split + 1);\n    return new ToDoList([...before, toggledItem, ...after]);\n  }\n  removeItem(item) {\n    let filtered = this.items.filter(i => i !== item);\n    return new ToDoList(filtered);\n  }\n  setAllItemStatus(isDone) {\n    let adjusted = this.items.map(i => new ToDoItem({\n      ...i,\n      isDone: isDone\n    }));\n    return new ToDoList(adjusted);\n  }\n  areAnyLeftToDo() {\n    return this.items.some(i => i.isDone === false);\n  }\n  areAnyDone() {\n    return this.items.some(i => i.isDone === true);\n  }\n}","map":{"version":3,"names":["ToDoItem","ToDoList","constructor","list","items","toSortedByDate","deadlines","noDeadlines","Utilities","partition","i","deadline","dates","noDates","deadlineDate","datesSorted","toSorted","a","b","stringCompareFn","map","toLowerCase","noDatesSorted","noDeadlinesSorted","task","newItems","isSorted","sorted","compared","item","index","tested","every","append","moveWithinArray","fromID","toID","console","log","insertBefore","array","matchFn","insertPoint","findIndex","before","slice","after","itemToMove","find","id","rest","filter","toggleDoneStatus","toggledItem","toggled","doneStatus","split","indexOf","removeItem","filtered","setAllItemStatus","isDone","adjusted","areAnyLeftToDo","some","areAnyDone"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/todo/src/classes/ToDoList.js"],"sourcesContent":["import ToDoItem from \"./ToDoItem\";\n\nexport default class ToDoList {\n  list;\n\n  constructor(...list) {\n    this.items = [list];\n  }\n\n  toSortedByDate() {\n    let [deadlines, noDeadlines] = Utilities.partition(this.items,\n      (i => i.deadline !== null));\n\n    let [dates, noDates] = Utilities.partition(deadlines,\n      (i => i.deadlineDate !== null));\n\n    let datesSorted = dates.toSorted(\n      (a, b) => a.deadlineDate - b.deadlineDate);\n\n    function stringCompareFn(a, b) {\n      [a, b] = [a, b].map(i => i.toLowerCase());\n      if (a < b) return -1;\n      else if (a > b) return 1;\n      else return 0;\n    }\n\n    let noDatesSorted = noDates.toSorted(\n      (a, b) => stringCompareFn(a.deadline, b.deadline));\n\n    let noDeadlinesSorted = noDeadlines.toSorted(\n      (a, b) => stringCompareFn(a.task, b.task));\n\n    let newItems = [...noDeadlinesSorted, ...noDatesSorted, ...datesSorted];\n    return new ToDoList(newItems);\n  }\n\n  isSorted() {\n    let sorted = this.toSortedByDate();\n    let compared = this.items.map((item, index) => item === sorted[index]);\n    let tested = compared.every(i => i === true);\n    return tested;\n  }\n\n  append(item) {\n    return new ToDoList([...this.items, item]);\n  }\n\n  moveWithinArray(fromID, toID) {\n    console.log(`Move from item ${fromID} to item ${toID}`);\n    function insertBefore(array, matchFn, item) {\n      let insertPoint = array.findIndex(matchFn);\n      let before = array.slice(0, insertPoint);\n      let after = array.slice(insertPoint);\n      return [...before, item, ...after];\n    }\n\n    let itemToMove = this.items.find(i => i.id === fromID);\n    let rest = this.filter(i => i !== itemToMove);\n\n    let newItems = [];\n    if (toID === \"bottom\") {\n      console.log(\"Move item to bottom\");\n      newItems = [...rest, itemToMove];\n    } else {\n      console.log(\"Insert item\");\n      newItems = insertBefore(rest, (i => i.id === toID), itemToMove);\n    }\n    return new ToDoList(newItems);\n  }\n\n  toggleDoneStatus(item) {\n    let toggledItem = item.toggled();\n    console.log(`Marking item as ${toggledItem.doneStatus}`);\n\n    let items = this.items\n    let split = items.indexOf(item);\n    let before = items.slice(0, split);\n    let after = items.slice(split + 1);\n    return new ToDoList([...before, toggledItem, ...after]);\n  }\n\n  removeItem(item) { \n    let filtered = this.items.filter(i => i !== item);\n    return new ToDoList(filtered);\n  }\n  \n  setAllItemStatus(isDone) {\n    let adjusted = this.items.map(i => new ToDoItem({...i, isDone: isDone}));\n    return new ToDoList(adjusted);\n  }\n\n  areAnyLeftToDo() {\n    return this.items.some(i => i.isDone === false);\n  }\n  \n  areAnyDone() {\n    return this.items.some(i => i.isDone === true);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}