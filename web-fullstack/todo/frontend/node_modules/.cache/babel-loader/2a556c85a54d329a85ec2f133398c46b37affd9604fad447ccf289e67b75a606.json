{"ast":null,"code":"var _jsxFileName = \"/home/andrewacashner/Documents/computing/javascript/react/todo/src/classes/ToDoItem.js\";\nimport Sugar from \"sugar-date\";\nimport Utilities from \"./Utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ToDoItem {\n  constructor({\n    task,\n    deadline = null,\n    isDone = false\n  }) {\n    items.task = task;\n    items.deadline = deadline;\n    items.deadlineDate = ToDoItem.dateFromString(deadline);\n    items.isDone = isDone;\n    items.id = crypto.randomUUID();\n  }\n  static dateFromString(deadline) {\n    let test, date;\n    if (deadline) {\n      test = Sugar.Date.create(deadline);\n      date = new Sugar.Date(test).isValid().valueOf() ? test : null;\n    } else {\n      date = null;\n    }\n    return date;\n  }\n  get deadlineString() {\n    if (items.deadlineDate) {\n      return `(${Sugar.Date.format(items.deadlineDate, \"%c\")})`;\n    } else if (items.deadline) {\n      return `(${items.deadline})`;\n    } else {\n      return \"\";\n    }\n  }\n  static doneOrNot(isDone) {\n    return isDone ? \"done\" : \"notDone\";\n  }\n  static activeOrNot(isDone) {\n    return isDone ? \"inactive\" : \"active\";\n  }\n  get doneStatus() {\n    return ToDoItem.doneOrNot(items.isDone);\n  }\n  get activeStatus() {\n    return ToDoItem.activeOrNot(items.isDone);\n  }\n  static toggled(item) {\n    return new ToDoItem({\n      ...item,\n      isDone: !item.isDone\n    });\n  }\n  Span() {\n    return function () {\n      let deadlineClassList = \"todoDeadline\";\n      let test = new Sugar.Date(items.deadlineDate);\n      if (items.deadlineDate && test.isPast().valueOf()) {\n        deadlineClassList += \" pastDue\";\n      }\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"todoItem\",\n        children: [items.task, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: deadlineClassList,\n          children: items.deadlineString\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this);\n    }.bind(items);\n  }\n}\nclass ToDoList extends Array {\n  static toSortedByDate(items) {\n    let [deadlines, noDeadlines] = Utilities.partition(items, i => i.deadline !== null);\n    let [dates, noDates] = Utilities.partition(deadlines, i => i.deadlineDate !== null);\n    let datesSorted = dates.toSorted((a, b) => a.deadlineDate - b.deadlineDate);\n    function stringCompareFn(a, b) {\n      [a, b] = [a, b].map(i => i.toLowerCase());\n      if (a < b) return -1;else if (a > b) return 1;else return 0;\n    }\n    let noDatesSorted = noDates.toSorted((a, b) => stringCompareFn(a.deadline, b.deadline));\n    let noDeadlinesSorted = noDeadlines.toSorted((a, b) => stringCompareFn(a.task, b.task));\n    return [...noDeadlinesSorted, ...noDatesSorted, ...datesSorted];\n  }\n  static isSorted(items) {\n    let sorted = ToDoList.toSortedByDate(items);\n    let compared = items.map((item, index) => item === sorted[index]);\n    let tested = compared.every(i => i === true);\n    return tested;\n  }\n  static append(items, item) {\n    return [...items, item];\n  }\n  static moveWithinArray(items, fromID, toID) {\n    console.log(`Move from item ${fromID} to item ${toID}`);\n    function insertBefore(array, matchFn, item) {\n      let insertPoint = array.findIndex(matchFn);\n      let before = array.slice(0, insertPoint);\n      let after = array.slice(insertPoint);\n      return [...before, item, ...after];\n    }\n    let itemToMove = items.find(i => i.id === fromID);\n    let rest = items.filter(i => i !== itemToMove);\n    let newItems = [];\n    if (toID === \"bottom\") {\n      console.log(\"Move item to bottom\");\n      newItems = [...rest, itemToMove];\n    } else {\n      console.log(\"Insert item\");\n      newItems = insertBefore(rest, i => i.id === toID, itemToMove);\n    }\n    return newItems;\n  }\n  static toggleDoneStatus(items, item) {\n    let toggledItem = ToDoItem.toggled(item);\n    console.log(`Marking item as ${toggledItem.doneStatus}`);\n    let split = items.indexOf(item);\n    let before = items.slice(0, split);\n    let after = items.slice(split + 1);\n    return [...before, toggledItem, ...after];\n  }\n  static removeItem(items, item) {\n    return items.filter(i => i !== item);\n  }\n  static setAllItemStatus(items, isDone) {\n    return items.map(i => new ToDoItem({\n      ...i,\n      isDone: isDone\n    }));\n  }\n  static areAnyLeftToDo(items) {\n    return items.some(i => i.isDone === false);\n  }\n  static areAnyDone(items) {\n    return items.some(i => i.isDone === true);\n  }\n}\nexport { ToDoItem, ToDoList };","map":{"version":3,"names":["Sugar","Utilities","jsxDEV","_jsxDEV","ToDoItem","constructor","task","deadline","isDone","items","deadlineDate","dateFromString","id","crypto","randomUUID","test","date","Date","create","isValid","valueOf","deadlineString","format","doneOrNot","activeOrNot","doneStatus","activeStatus","toggled","item","Span","deadlineClassList","isPast","className","children","fileName","_jsxFileName","lineNumber","columnNumber","bind","ToDoList","Array","toSortedByDate","deadlines","noDeadlines","partition","i","dates","noDates","datesSorted","toSorted","a","b","stringCompareFn","map","toLowerCase","noDatesSorted","noDeadlinesSorted","isSorted","sorted","compared","index","tested","every","append","moveWithinArray","fromID","toID","console","log","insertBefore","array","matchFn","insertPoint","findIndex","before","slice","after","itemToMove","find","rest","filter","newItems","toggleDoneStatus","toggledItem","split","indexOf","removeItem","setAllItemStatus","areAnyLeftToDo","some","areAnyDone"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/todo/src/classes/ToDoItem.js"],"sourcesContent":["import Sugar from \"sugar-date\";\nimport Utilities from \"./Utilities\";\n\nclass ToDoItem {\n  task;\n  deadline;\n  deadlineDate;\n  isDone;\n  id;\n\n  constructor({task, deadline = null, isDone = false}) {\n    items.task = task;\n    items.deadline = deadline;\n    items.deadlineDate = ToDoItem.dateFromString(deadline);\n    items.isDone = isDone;\n    items.id = crypto.randomUUID();\n  }\n  \n  static dateFromString(deadline) {\n    let test, date;\n    if (deadline) {\n      test = Sugar.Date.create(deadline);\n      date = (new Sugar.Date(test).isValid().valueOf()) ? test : null;\n    } else {\n      date = null;\n    }\n    return date;\n  }\n\n  get deadlineString() {\n    if (items.deadlineDate) {\n      return `(${Sugar.Date.format(items.deadlineDate, \"%c\")})`;\n    } else if (items.deadline) {\n      return `(${items.deadline})`;\n    } else {\n      return \"\";\n    }\n  }\n\n  static doneOrNot(isDone) {\n    return (isDone) ? \"done\" : \"notDone\";\n  }\n\n  static activeOrNot(isDone) {\n    return (isDone) ? \"inactive\" : \"active\";\n  }\n\n  get doneStatus() {\n    return ToDoItem.doneOrNot(items.isDone);\n  }\n\n  get activeStatus() {\n    return ToDoItem.activeOrNot(items.isDone);\n  }\n\n  static toggled(item) {\n    return new ToDoItem({...item, isDone: !item.isDone});\n  }\n\n  Span() {\n    return function() {\n      let deadlineClassList = \"todoDeadline\";\n\n      let test = new Sugar.Date(items.deadlineDate);\n      if (items.deadlineDate && test.isPast().valueOf()) {\n        deadlineClassList += \" pastDue\";\n      }\n\n      return(\n        <span className=\"todoItem\">\n          {items.task}\n          <span className={deadlineClassList}>{items.deadlineString}</span>\n        </span>\n      );\n    }.bind(items);\n  }\n}\n\nclass ToDoList extends Array {\n  static toSortedByDate(items) {\n    let [deadlines, noDeadlines] = Utilities.partition(items,\n      (i => i.deadline !== null));\n\n    let [dates, noDates] = Utilities.partition(deadlines,\n      (i => i.deadlineDate !== null));\n\n    let datesSorted = dates.toSorted(\n      (a, b) => a.deadlineDate - b.deadlineDate);\n\n    function stringCompareFn(a, b) {\n      [a, b] = [a, b].map(i => i.toLowerCase());\n      if (a < b) return -1;\n      else if (a > b) return 1;\n      else return 0;\n    }\n\n    let noDatesSorted = noDates.toSorted(\n      (a, b) => stringCompareFn(a.deadline, b.deadline));\n\n    let noDeadlinesSorted = noDeadlines.toSorted(\n      (a, b) => stringCompareFn(a.task, b.task));\n\n    return [...noDeadlinesSorted, ...noDatesSorted, ...datesSorted];\n  }\n\n  static isSorted(items) {\n    let sorted = ToDoList.toSortedByDate(items);\n    let compared = items.map((item, index) => item === sorted[index]);\n    let tested = compared.every(i => i === true);\n    return tested;\n  }\n\n  static append(items, item) {\n    return [...items, item];\n  }\n\n  static moveWithinArray(items, fromID, toID) {\n    console.log(`Move from item ${fromID} to item ${toID}`);\n    function insertBefore(array, matchFn, item) {\n      let insertPoint = array.findIndex(matchFn);\n      let before = array.slice(0, insertPoint);\n      let after = array.slice(insertPoint);\n      return [...before, item, ...after];\n    }\n\n    let itemToMove = items.find(i => i.id === fromID);\n    let rest = items.filter(i => i !== itemToMove);\n\n    let newItems = [];\n    if (toID === \"bottom\") {\n      console.log(\"Move item to bottom\");\n      newItems = [...rest, itemToMove];\n    } else {\n      console.log(\"Insert item\");\n      newItems = insertBefore(rest, (i => i.id === toID), itemToMove);\n    }\n    return newItems;\n  }\n\n  static toggleDoneStatus(items, item) {\n    let toggledItem = ToDoItem.toggled(item);\n    console.log(`Marking item as ${toggledItem.doneStatus}`);\n\n    let split = items.indexOf(item);\n    let before = items.slice(0, split);\n    let after = items.slice(split + 1);\n    return [...before, toggledItem, ...after];\n  }\n\n  static removeItem(items, item) { \n    return items.filter(i => i !== item);\n  }\n  \n  static setAllItemStatus(items, isDone) {\n    return items.map(i => new ToDoItem({...i, isDone: isDone}));\n  }\n\n  static areAnyLeftToDo(items) {\n    return items.some(i => i.isDone === false);\n  }\n  \n  static areAnyDone(items) {\n    return items.some(i => i.isDone === true);\n  }\n}\n\nexport { ToDoItem, ToDoList };\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,QAAQ,CAAC;EAObC,WAAWA,CAAC;IAACC,IAAI;IAAEC,QAAQ,GAAG,IAAI;IAAEC,MAAM,GAAG;EAAK,CAAC,EAAE;IACnDC,KAAK,CAACH,IAAI,GAAGA,IAAI;IACjBG,KAAK,CAACF,QAAQ,GAAGA,QAAQ;IACzBE,KAAK,CAACC,YAAY,GAAGN,QAAQ,CAACO,cAAc,CAACJ,QAAQ,CAAC;IACtDE,KAAK,CAACD,MAAM,GAAGA,MAAM;IACrBC,KAAK,CAACG,EAAE,GAAGC,MAAM,CAACC,UAAU,CAAC,CAAC;EAChC;EAEA,OAAOH,cAAcA,CAACJ,QAAQ,EAAE;IAC9B,IAAIQ,IAAI,EAAEC,IAAI;IACd,IAAIT,QAAQ,EAAE;MACZQ,IAAI,GAAGf,KAAK,CAACiB,IAAI,CAACC,MAAM,CAACX,QAAQ,CAAC;MAClCS,IAAI,GAAI,IAAIhB,KAAK,CAACiB,IAAI,CAACF,IAAI,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAIL,IAAI,GAAG,IAAI;IACjE,CAAC,MAAM;MACLC,IAAI,GAAG,IAAI;IACb;IACA,OAAOA,IAAI;EACb;EAEA,IAAIK,cAAcA,CAAA,EAAG;IACnB,IAAIZ,KAAK,CAACC,YAAY,EAAE;MACtB,OAAQ,IAAGV,KAAK,CAACiB,IAAI,CAACK,MAAM,CAACb,KAAK,CAACC,YAAY,EAAE,IAAI,CAAE,GAAE;IAC3D,CAAC,MAAM,IAAID,KAAK,CAACF,QAAQ,EAAE;MACzB,OAAQ,IAAGE,KAAK,CAACF,QAAS,GAAE;IAC9B,CAAC,MAAM;MACL,OAAO,EAAE;IACX;EACF;EAEA,OAAOgB,SAASA,CAACf,MAAM,EAAE;IACvB,OAAQA,MAAM,GAAI,MAAM,GAAG,SAAS;EACtC;EAEA,OAAOgB,WAAWA,CAAChB,MAAM,EAAE;IACzB,OAAQA,MAAM,GAAI,UAAU,GAAG,QAAQ;EACzC;EAEA,IAAIiB,UAAUA,CAAA,EAAG;IACf,OAAOrB,QAAQ,CAACmB,SAAS,CAACd,KAAK,CAACD,MAAM,CAAC;EACzC;EAEA,IAAIkB,YAAYA,CAAA,EAAG;IACjB,OAAOtB,QAAQ,CAACoB,WAAW,CAACf,KAAK,CAACD,MAAM,CAAC;EAC3C;EAEA,OAAOmB,OAAOA,CAACC,IAAI,EAAE;IACnB,OAAO,IAAIxB,QAAQ,CAAC;MAAC,GAAGwB,IAAI;MAAEpB,MAAM,EAAE,CAACoB,IAAI,CAACpB;IAAM,CAAC,CAAC;EACtD;EAEAqB,IAAIA,CAAA,EAAG;IACL,OAAO,YAAW;MAChB,IAAIC,iBAAiB,GAAG,cAAc;MAEtC,IAAIf,IAAI,GAAG,IAAIf,KAAK,CAACiB,IAAI,CAACR,KAAK,CAACC,YAAY,CAAC;MAC7C,IAAID,KAAK,CAACC,YAAY,IAAIK,IAAI,CAACgB,MAAM,CAAC,CAAC,CAACX,OAAO,CAAC,CAAC,EAAE;QACjDU,iBAAiB,IAAI,UAAU;MACjC;MAEA,oBACE3B,OAAA;QAAM6B,SAAS,EAAC,UAAU;QAAAC,QAAA,GACvBxB,KAAK,CAACH,IAAI,eACXH,OAAA;UAAM6B,SAAS,EAAEF,iBAAkB;UAAAG,QAAA,EAAExB,KAAK,CAACY;QAAc;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7D,CAAC;IAEX,CAAC,CAACC,IAAI,CAAC7B,KAAK,CAAC;EACf;AACF;AAEA,MAAM8B,QAAQ,SAASC,KAAK,CAAC;EAC3B,OAAOC,cAAcA,CAAChC,KAAK,EAAE;IAC3B,IAAI,CAACiC,SAAS,EAAEC,WAAW,CAAC,GAAG1C,SAAS,CAAC2C,SAAS,CAACnC,KAAK,EACrDoC,CAAC,IAAIA,CAAC,CAACtC,QAAQ,KAAK,IAAK,CAAC;IAE7B,IAAI,CAACuC,KAAK,EAAEC,OAAO,CAAC,GAAG9C,SAAS,CAAC2C,SAAS,CAACF,SAAS,EACjDG,CAAC,IAAIA,CAAC,CAACnC,YAAY,KAAK,IAAK,CAAC;IAEjC,IAAIsC,WAAW,GAAGF,KAAK,CAACG,QAAQ,CAC9B,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACxC,YAAY,GAAGyC,CAAC,CAACzC,YAAY,CAAC;IAE5C,SAAS0C,eAAeA,CAACF,CAAC,EAAEC,CAAC,EAAE;MAC7B,CAACD,CAAC,EAAEC,CAAC,CAAC,GAAG,CAACD,CAAC,EAAEC,CAAC,CAAC,CAACE,GAAG,CAACR,CAAC,IAAIA,CAAC,CAACS,WAAW,CAAC,CAAC,CAAC;MACzC,IAAIJ,CAAC,GAAGC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,KAChB,IAAID,CAAC,GAAGC,CAAC,EAAE,OAAO,CAAC,CAAC,KACpB,OAAO,CAAC;IACf;IAEA,IAAII,aAAa,GAAGR,OAAO,CAACE,QAAQ,CAClC,CAACC,CAAC,EAAEC,CAAC,KAAKC,eAAe,CAACF,CAAC,CAAC3C,QAAQ,EAAE4C,CAAC,CAAC5C,QAAQ,CAAC,CAAC;IAEpD,IAAIiD,iBAAiB,GAAGb,WAAW,CAACM,QAAQ,CAC1C,CAACC,CAAC,EAAEC,CAAC,KAAKC,eAAe,CAACF,CAAC,CAAC5C,IAAI,EAAE6C,CAAC,CAAC7C,IAAI,CAAC,CAAC;IAE5C,OAAO,CAAC,GAAGkD,iBAAiB,EAAE,GAAGD,aAAa,EAAE,GAAGP,WAAW,CAAC;EACjE;EAEA,OAAOS,QAAQA,CAAChD,KAAK,EAAE;IACrB,IAAIiD,MAAM,GAAGnB,QAAQ,CAACE,cAAc,CAAChC,KAAK,CAAC;IAC3C,IAAIkD,QAAQ,GAAGlD,KAAK,CAAC4C,GAAG,CAAC,CAACzB,IAAI,EAAEgC,KAAK,KAAKhC,IAAI,KAAK8B,MAAM,CAACE,KAAK,CAAC,CAAC;IACjE,IAAIC,MAAM,GAAGF,QAAQ,CAACG,KAAK,CAACjB,CAAC,IAAIA,CAAC,KAAK,IAAI,CAAC;IAC5C,OAAOgB,MAAM;EACf;EAEA,OAAOE,MAAMA,CAACtD,KAAK,EAAEmB,IAAI,EAAE;IACzB,OAAO,CAAC,GAAGnB,KAAK,EAAEmB,IAAI,CAAC;EACzB;EAEA,OAAOoC,eAAeA,CAACvD,KAAK,EAAEwD,MAAM,EAAEC,IAAI,EAAE;IAC1CC,OAAO,CAACC,GAAG,CAAE,kBAAiBH,MAAO,YAAWC,IAAK,EAAC,CAAC;IACvD,SAASG,YAAYA,CAACC,KAAK,EAAEC,OAAO,EAAE3C,IAAI,EAAE;MAC1C,IAAI4C,WAAW,GAAGF,KAAK,CAACG,SAAS,CAACF,OAAO,CAAC;MAC1C,IAAIG,MAAM,GAAGJ,KAAK,CAACK,KAAK,CAAC,CAAC,EAAEH,WAAW,CAAC;MACxC,IAAII,KAAK,GAAGN,KAAK,CAACK,KAAK,CAACH,WAAW,CAAC;MACpC,OAAO,CAAC,GAAGE,MAAM,EAAE9C,IAAI,EAAE,GAAGgD,KAAK,CAAC;IACpC;IAEA,IAAIC,UAAU,GAAGpE,KAAK,CAACqE,IAAI,CAACjC,CAAC,IAAIA,CAAC,CAACjC,EAAE,KAAKqD,MAAM,CAAC;IACjD,IAAIc,IAAI,GAAGtE,KAAK,CAACuE,MAAM,CAACnC,CAAC,IAAIA,CAAC,KAAKgC,UAAU,CAAC;IAE9C,IAAII,QAAQ,GAAG,EAAE;IACjB,IAAIf,IAAI,KAAK,QAAQ,EAAE;MACrBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCa,QAAQ,GAAG,CAAC,GAAGF,IAAI,EAAEF,UAAU,CAAC;IAClC,CAAC,MAAM;MACLV,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1Ba,QAAQ,GAAGZ,YAAY,CAACU,IAAI,EAAGlC,CAAC,IAAIA,CAAC,CAACjC,EAAE,KAAKsD,IAAI,EAAGW,UAAU,CAAC;IACjE;IACA,OAAOI,QAAQ;EACjB;EAEA,OAAOC,gBAAgBA,CAACzE,KAAK,EAAEmB,IAAI,EAAE;IACnC,IAAIuD,WAAW,GAAG/E,QAAQ,CAACuB,OAAO,CAACC,IAAI,CAAC;IACxCuC,OAAO,CAACC,GAAG,CAAE,mBAAkBe,WAAW,CAAC1D,UAAW,EAAC,CAAC;IAExD,IAAI2D,KAAK,GAAG3E,KAAK,CAAC4E,OAAO,CAACzD,IAAI,CAAC;IAC/B,IAAI8C,MAAM,GAAGjE,KAAK,CAACkE,KAAK,CAAC,CAAC,EAAES,KAAK,CAAC;IAClC,IAAIR,KAAK,GAAGnE,KAAK,CAACkE,KAAK,CAACS,KAAK,GAAG,CAAC,CAAC;IAClC,OAAO,CAAC,GAAGV,MAAM,EAAES,WAAW,EAAE,GAAGP,KAAK,CAAC;EAC3C;EAEA,OAAOU,UAAUA,CAAC7E,KAAK,EAAEmB,IAAI,EAAE;IAC7B,OAAOnB,KAAK,CAACuE,MAAM,CAACnC,CAAC,IAAIA,CAAC,KAAKjB,IAAI,CAAC;EACtC;EAEA,OAAO2D,gBAAgBA,CAAC9E,KAAK,EAAED,MAAM,EAAE;IACrC,OAAOC,KAAK,CAAC4C,GAAG,CAACR,CAAC,IAAI,IAAIzC,QAAQ,CAAC;MAAC,GAAGyC,CAAC;MAAErC,MAAM,EAAEA;IAAM,CAAC,CAAC,CAAC;EAC7D;EAEA,OAAOgF,cAAcA,CAAC/E,KAAK,EAAE;IAC3B,OAAOA,KAAK,CAACgF,IAAI,CAAC5C,CAAC,IAAIA,CAAC,CAACrC,MAAM,KAAK,KAAK,CAAC;EAC5C;EAEA,OAAOkF,UAAUA,CAACjF,KAAK,EAAE;IACvB,OAAOA,KAAK,CAACgF,IAAI,CAAC5C,CAAC,IAAIA,CAAC,CAACrC,MAAM,KAAK,IAAI,CAAC;EAC3C;AACF;AAEA,SAASJ,QAAQ,EAAEmC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}