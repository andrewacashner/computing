{"ast":null,"code":"import ToDoItem from \"./ToDoItem\";\nexport default class ToDoList {\n  constructor(list = []) {\n    this.list = [...list];\n    this.draftEntry = new ToDoItem({\n      task: \"RACCOON\"\n    });\n  }\n  partition(testFn) {\n    let results = {\n      true: [],\n      false: []\n    };\n    if (this.list.length > 0) {\n      this.list.forEach(i => results[testFn(i)].push(i));\n    }\n    return [results.true, results.false].map(r => new ToDoList(r));\n  }\n  toSortedByDate() {\n    let [deadlines, noDeadlines] = this.partition(i => i.deadline !== null);\n    let [dates, noDates] = deadlines.partition(i => i.deadlineDate !== null);\n    let datesSorted = dates.list.toSorted((a, b) => a.deadlineDate - b.deadlineDate);\n    function stringCompareFn(a, b) {\n      [a, b] = [a, b].map(i => i.toLowerCase());\n      if (a < b) return -1;else if (a > b) return 1;else return 0;\n    }\n    let noDatesSorted = noDates.list.toSorted((a, b) => stringCompareFn(a.deadline, b.deadline));\n    let noDeadlinesSorted = noDeadlines.list.toSorted((a, b) => stringCompareFn(a.task, b.task));\n    let newItems = [...noDeadlinesSorted, ...noDatesSorted, ...datesSorted];\n    return new ToDoList(newItems);\n  }\n  hasIdenticalContents(other) {\n    let compared = this.list.map((item, index) => item === other.list[index]);\n    let tested = compared.every(i => i === true);\n    return tested;\n  }\n  isSorted() {\n    let sorted = this.toSortedByDate();\n    return this.hasIdenticalContents(sorted);\n  }\n  append(item) {\n    return new ToDoList([...this.list, item]);\n  }\n  moveWithinArray(fromID, toID) {\n    console.log(`Move from item ${fromID} to item ${toID}`);\n    function insertBefore(array, matchFn, item) {\n      let insertPoint = array.findIndex(matchFn);\n      let before = array.slice(0, insertPoint);\n      let after = array.slice(insertPoint);\n      return [...before, item, ...after];\n    }\n    let itemToMove = this.list.find(i => i.id === fromID);\n    let rest = this.list.filter(i => i !== itemToMove);\n    let newItems = [];\n    if (toID === \"bottom\") {\n      console.log(\"Move item to bottom\");\n      newItems = [...rest, itemToMove];\n    } else {\n      console.log(\"Insert item\");\n      newItems = insertBefore(rest, i => i.id === toID, itemToMove);\n    }\n    return new ToDoList(newItems);\n  }\n  removeItem(item) {\n    let filtered = this.list.filter(i => i !== item);\n    return new ToDoList(filtered);\n  }\n  toggleDoneStatus(item) {\n    let toggledItem = item.toggled();\n    console.log(`Marking item as ${toggledItem.doneStatus}`);\n    let items = this.list;\n    let split = items.indexOf(item);\n    let before = items.slice(0, split);\n    let after = items.slice(split + 1);\n    return new ToDoList([...before, toggledItem, ...after]);\n  }\n  setAllItemStatus(isDone) {\n    let adjusted = this.list.map(i => new ToDoItem({\n      ...i,\n      isDone: isDone\n    }));\n    return new ToDoList(adjusted);\n  }\n  areAnyLeftToDo() {\n    return this.list.some(i => i.isDone === false);\n  }\n  areAnyDone() {\n    return this.list.some(i => i.isDone === true);\n  }\n  activeOrNot(test) {\n    return test ? \"active\" : \"inactive\";\n  }\n  checkAllStatus() {\n    return this.activeOrNot(this.areAnyLeftToDo());\n  }\n  uncheckAllStatus() {\n    return this.activeOrNot(this.areAnyDone());\n  }\n  unsortedStatus() {\n    return this.activeOrNot(!this.isSorted());\n  }\n}","map":{"version":3,"names":["ToDoItem","ToDoList","constructor","list","draftEntry","task","partition","testFn","results","true","false","length","forEach","i","push","map","r","toSortedByDate","deadlines","noDeadlines","deadline","dates","noDates","deadlineDate","datesSorted","toSorted","a","b","stringCompareFn","toLowerCase","noDatesSorted","noDeadlinesSorted","newItems","hasIdenticalContents","other","compared","item","index","tested","every","isSorted","sorted","append","moveWithinArray","fromID","toID","console","log","insertBefore","array","matchFn","insertPoint","findIndex","before","slice","after","itemToMove","find","id","rest","filter","removeItem","filtered","toggleDoneStatus","toggledItem","toggled","doneStatus","items","split","indexOf","setAllItemStatus","isDone","adjusted","areAnyLeftToDo","some","areAnyDone","activeOrNot","test","checkAllStatus","uncheckAllStatus","unsortedStatus"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/todo/src/classes/ToDoList.js"],"sourcesContent":["import ToDoItem from \"./ToDoItem\";\n\nexport default class ToDoList {\n  list;\n  draftEntry;\n\n  constructor(list = []) {\n    this.list = [...list];\n    this.draftEntry = new ToDoItem({task: \"RACCOON\"});\n  }\n\n  partition(testFn) {\n    let results = { true: [], false: [] };\n    if (this.list.length > 0) {\n      this.list.forEach(i => results[testFn(i)].push(i));\n    }\n    return [results.true, results.false].map(r => new ToDoList(r));\n  }\n\n  toSortedByDate() {\n    let [deadlines, noDeadlines] = this.partition(i => i.deadline !== null);\n\n    let [dates, noDates] = deadlines.partition(i => i.deadlineDate !== null);\n\n    let datesSorted = dates.list.toSorted(\n      (a, b) => a.deadlineDate - b.deadlineDate);\n\n    function stringCompareFn(a, b) {\n      [a, b] = [a, b].map(i => i.toLowerCase());\n      if (a < b) return -1;\n      else if (a > b) return 1;\n      else return 0;\n    }\n\n    let noDatesSorted = noDates.list.toSorted(\n      (a, b) => stringCompareFn(a.deadline, b.deadline));\n\n    let noDeadlinesSorted = noDeadlines.list.toSorted(\n      (a, b) => stringCompareFn(a.task, b.task));\n\n    let newItems = [...noDeadlinesSorted, ...noDatesSorted, ...datesSorted];\n    return new ToDoList(newItems);\n  }\n\n  hasIdenticalContents(other) {\n    let compared = this.list.map((item, index) => item === other.list[index]);\n    let tested = compared.every(i => i === true);\n    return tested;\n  }\n \n  isSorted() {\n    let sorted = this.toSortedByDate();\n    return this.hasIdenticalContents(sorted);\n  }\n\n  append(item) {\n    return new ToDoList([...this.list, item]);\n  }\n\n  moveWithinArray(fromID, toID) {\n    console.log(`Move from item ${fromID} to item ${toID}`);\n    function insertBefore(array, matchFn, item) {\n      let insertPoint = array.findIndex(matchFn);\n      let before = array.slice(0, insertPoint);\n      let after = array.slice(insertPoint);\n      return [...before, item, ...after];\n    }\n\n    let itemToMove = this.list.find(i => i.id === fromID);\n    let rest = this.list.filter(i => i !== itemToMove);\n\n    let newItems = [];\n    if (toID === \"bottom\") {\n      console.log(\"Move item to bottom\");\n      newItems = [...rest, itemToMove];\n    } else {\n      console.log(\"Insert item\");\n      newItems = insertBefore(rest, (i => i.id === toID), itemToMove);\n    }\n    return new ToDoList(newItems);\n  }\n\n  removeItem(item) { \n    let filtered = this.list.filter(i => i !== item);\n    return new ToDoList(filtered);\n  }\n\n  toggleDoneStatus(item) {\n    let toggledItem = item.toggled();\n    console.log(`Marking item as ${toggledItem.doneStatus}`);\n\n    let items = this.list;\n    let split = items.indexOf(item);\n    let before = items.slice(0, split);\n    let after = items.slice(split + 1);\n    return new ToDoList([...before, toggledItem, ...after]);\n  }\n\n  setAllItemStatus(isDone) {\n    let adjusted = this.list.map(i => new ToDoItem({...i, isDone: isDone}));\n    return new ToDoList(adjusted);\n  }\n\n  areAnyLeftToDo() {\n    return this.list.some(i => i.isDone === false);\n  }\n  \n  areAnyDone() {\n    return this.list.some(i => i.isDone === true);\n  }\n\n  activeOrNot(test) {\n    return (test) ? \"active\" : \"inactive\";\n  }\n\n  checkAllStatus() {\n    return this.activeOrNot(this.areAnyLeftToDo());\n  }\n\n  uncheckAllStatus() {\n    return this.activeOrNot(this.areAnyDone());\n  }\n\n  unsortedStatus() {\n    return this.activeOrNot(!this.isSorted());\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}