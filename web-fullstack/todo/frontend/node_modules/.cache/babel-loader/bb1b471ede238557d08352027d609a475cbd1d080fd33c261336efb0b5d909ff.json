{"ast":null,"code":"'use strict';\n\nvar trunc = require('../../common/var/trunc'),\n  cloneDate = require('./cloneDate'),\n  advanceDate = require('./advanceDate');\nfunction getTimeDistanceForUnit(d1, d2, unit) {\n  var fwd = d2 > d1,\n    num,\n    tmp;\n  if (!fwd) {\n    tmp = d2;\n    d2 = d1;\n    d1 = tmp;\n  }\n  num = d2 - d1;\n  if (unit.multiplier > 1) {\n    num = trunc(num / unit.multiplier);\n  }\n  // For higher order with potential ambiguity, use the numeric calculation\n  // as a starting point, then iterate until we pass the target date. Decrement\n  // starting point by 1 to prevent overshooting the date due to inconsistencies\n  // in ambiguous units numerically. For example, calculating the number of days\n  // from the beginning of the year to August 5th at 11:59:59 by doing a simple\n  // d2 - d1 will produce different results depending on whether or not a\n  // timezone shift was encountered due to DST, however that should not have an\n  // effect on our calculation here, so subtract by 1 to ensure that the\n  // starting point has not already overshot our target date.\n  if (unit.ambiguous) {\n    d1 = cloneDate(d1);\n    if (num) {\n      num -= 1;\n      advanceDate(d1, unit.name, num);\n    }\n    while (d1 < d2) {\n      advanceDate(d1, unit.name, 1);\n      if (d1 > d2) {\n        break;\n      }\n      num += 1;\n    }\n  }\n  return fwd ? -num : num;\n}\nmodule.exports = getTimeDistanceForUnit;","map":{"version":3,"names":["trunc","require","cloneDate","advanceDate","getTimeDistanceForUnit","d1","d2","unit","fwd","num","tmp","multiplier","ambiguous","name","module","exports"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/todo/node_modules/sugar-date/date/internal/getTimeDistanceForUnit.js"],"sourcesContent":["'use strict';\n\nvar trunc = require('../../common/var/trunc'),\n    cloneDate = require('./cloneDate'),\n    advanceDate = require('./advanceDate');\n\nfunction getTimeDistanceForUnit(d1, d2, unit) {\n  var fwd = d2 > d1, num, tmp;\n  if (!fwd) {\n    tmp = d2;\n    d2  = d1;\n    d1  = tmp;\n  }\n  num = d2 - d1;\n  if (unit.multiplier > 1) {\n    num = trunc(num / unit.multiplier);\n  }\n  // For higher order with potential ambiguity, use the numeric calculation\n  // as a starting point, then iterate until we pass the target date. Decrement\n  // starting point by 1 to prevent overshooting the date due to inconsistencies\n  // in ambiguous units numerically. For example, calculating the number of days\n  // from the beginning of the year to August 5th at 11:59:59 by doing a simple\n  // d2 - d1 will produce different results depending on whether or not a\n  // timezone shift was encountered due to DST, however that should not have an\n  // effect on our calculation here, so subtract by 1 to ensure that the\n  // starting point has not already overshot our target date.\n  if (unit.ambiguous) {\n    d1 = cloneDate(d1);\n    if (num) {\n      num -= 1;\n      advanceDate(d1, unit.name, num);\n    }\n    while (d1 < d2) {\n      advanceDate(d1, unit.name, 1);\n      if (d1 > d2) {\n        break;\n      }\n      num += 1;\n    }\n  }\n  return fwd ? -num : num;\n}\n\nmodule.exports = getTimeDistanceForUnit;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,wBAAwB,CAAC;EACzCC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;EAClCE,WAAW,GAAGF,OAAO,CAAC,eAAe,CAAC;AAE1C,SAASG,sBAAsBA,CAACC,EAAE,EAAEC,EAAE,EAAEC,IAAI,EAAE;EAC5C,IAAIC,GAAG,GAAGF,EAAE,GAAGD,EAAE;IAAEI,GAAG;IAAEC,GAAG;EAC3B,IAAI,CAACF,GAAG,EAAE;IACRE,GAAG,GAAGJ,EAAE;IACRA,EAAE,GAAID,EAAE;IACRA,EAAE,GAAIK,GAAG;EACX;EACAD,GAAG,GAAGH,EAAE,GAAGD,EAAE;EACb,IAAIE,IAAI,CAACI,UAAU,GAAG,CAAC,EAAE;IACvBF,GAAG,GAAGT,KAAK,CAACS,GAAG,GAAGF,IAAI,CAACI,UAAU,CAAC;EACpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIJ,IAAI,CAACK,SAAS,EAAE;IAClBP,EAAE,GAAGH,SAAS,CAACG,EAAE,CAAC;IAClB,IAAII,GAAG,EAAE;MACPA,GAAG,IAAI,CAAC;MACRN,WAAW,CAACE,EAAE,EAAEE,IAAI,CAACM,IAAI,EAAEJ,GAAG,CAAC;IACjC;IACA,OAAOJ,EAAE,GAAGC,EAAE,EAAE;MACdH,WAAW,CAACE,EAAE,EAAEE,IAAI,CAACM,IAAI,EAAE,CAAC,CAAC;MAC7B,IAAIR,EAAE,GAAGC,EAAE,EAAE;QACX;MACF;MACAG,GAAG,IAAI,CAAC;IACV;EACF;EACA,OAAOD,GAAG,GAAG,CAACC,GAAG,GAAGA,GAAG;AACzB;AAEAK,MAAM,CAACC,OAAO,GAAGX,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}