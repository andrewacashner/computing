{"ast":null,"code":"'use strict';\n\nvar NATIVE_TYPES = require('./NATIVE_TYPES'),\n  forEach = require('../internal/forEach'),\n  isClass = require('../internal/isClass'),\n  spaceSplit = require('../internal/spaceSplit'),\n  isPlainObject = require('../internal/isPlainObject');\nvar isSerializable, isBoolean, isNumber, isString, isDate, isRegExp, isFunction, isArray, isSet, isMap, isError;\nfunction buildClassChecks() {\n  var knownTypes = {};\n  function addCoreTypes() {\n    var names = spaceSplit(NATIVE_TYPES);\n    isBoolean = buildPrimitiveClassCheck(names[0]);\n    isNumber = buildPrimitiveClassCheck(names[1]);\n    isString = buildPrimitiveClassCheck(names[2]);\n    isDate = buildClassCheck(names[3]);\n    isRegExp = buildClassCheck(names[4]);\n\n    // Wanted to enhance performance here by using simply \"typeof\"\n    // but Firefox has two major issues that make this impossible,\n    // one fixed, the other not, so perform a full class check here.\n    //\n    // 1. Regexes can be typeof \"function\" in FF < 3\n    //    https://bugzilla.mozilla.org/show_bug.cgi?id=61911 (fixed)\n    //\n    // 2. HTMLEmbedElement and HTMLObjectElement are be typeof \"function\"\n    //    https://bugzilla.mozilla.org/show_bug.cgi?id=268945 (won't fix)\n    isFunction = buildClassCheck(names[5]);\n\n    // istanbul ignore next\n    isArray = Array.isArray || buildClassCheck(names[6]);\n    isError = buildClassCheck(names[7]);\n    isSet = buildClassCheck(names[8], typeof Set !== 'undefined' && Set);\n    isMap = buildClassCheck(names[9], typeof Map !== 'undefined' && Map);\n\n    // Add core types as known so that they can be checked by value below,\n    // notably excluding Functions and adding Arguments and Error.\n    addKnownType('Arguments');\n    addKnownType(names[0]);\n    addKnownType(names[1]);\n    addKnownType(names[2]);\n    addKnownType(names[3]);\n    addKnownType(names[4]);\n    addKnownType(names[6]);\n  }\n  function addArrayTypes() {\n    var types = 'Int8 Uint8 Uint8Clamped Int16 Uint16 Int32 Uint32 Float32 Float64';\n    forEach(spaceSplit(types), function (str) {\n      addKnownType(str + 'Array');\n    });\n  }\n  function addKnownType(className) {\n    var str = '[object ' + className + ']';\n    knownTypes[str] = true;\n  }\n  function isKnownType(className) {\n    return knownTypes[className];\n  }\n  function buildClassCheck(className, globalObject) {\n    // istanbul ignore if\n    if (globalObject && isClass(new globalObject(), 'Object')) {\n      return getConstructorClassCheck(globalObject);\n    } else {\n      return getToStringClassCheck(className);\n    }\n  }\n\n  // Map and Set may be [object Object] in certain IE environments.\n  // In this case we need to perform a check using the constructor\n  // instead of Object.prototype.toString.\n  // istanbul ignore next\n  function getConstructorClassCheck(obj) {\n    var ctorStr = String(obj);\n    return function (obj) {\n      return String(obj.constructor) === ctorStr;\n    };\n  }\n  function getToStringClassCheck(className) {\n    return function (obj, str) {\n      // perf: Returning up front on instanceof appears to be slower.\n      return isClass(obj, className, str);\n    };\n  }\n  function buildPrimitiveClassCheck(className) {\n    var type = className.toLowerCase();\n    return function (obj) {\n      var t = typeof obj;\n      return t === type || t === 'object' && isClass(obj, className);\n    };\n  }\n  addCoreTypes();\n  addArrayTypes();\n  isSerializable = function (obj, className) {\n    // Only known objects can be serialized. This notably excludes functions,\n    // host objects, Symbols (which are matched by reference), and instances\n    // of classes. The latter can arguably be matched by value, but\n    // distinguishing between these and host objects -- which should never be\n    // compared by value -- is very tricky so not dealing with it here.\n    return isKnownType(className) || isPlainObject(obj, className);\n  };\n}\nbuildClassChecks();\nmodule.exports = {\n  isSerializable: isSerializable,\n  isBoolean: isBoolean,\n  isNumber: isNumber,\n  isString: isString,\n  isDate: isDate,\n  isRegExp: isRegExp,\n  isFunction: isFunction,\n  isArray: isArray,\n  isSet: isSet,\n  isMap: isMap,\n  isError: isError\n};","map":{"version":3,"names":["NATIVE_TYPES","require","forEach","isClass","spaceSplit","isPlainObject","isSerializable","isBoolean","isNumber","isString","isDate","isRegExp","isFunction","isArray","isSet","isMap","isError","buildClassChecks","knownTypes","addCoreTypes","names","buildPrimitiveClassCheck","buildClassCheck","Array","Set","Map","addKnownType","addArrayTypes","types","str","className","isKnownType","globalObject","getConstructorClassCheck","getToStringClassCheck","obj","ctorStr","String","constructor","type","toLowerCase","t","module","exports"],"sources":["/home/andrewacashner/Documents/computing/javascript/react/todo/node_modules/sugar-date/common/var/classChecks.js"],"sourcesContent":["'use strict';\n\nvar NATIVE_TYPES = require('./NATIVE_TYPES'),\n    forEach = require('../internal/forEach'),\n    isClass = require('../internal/isClass'),\n    spaceSplit = require('../internal/spaceSplit'),\n    isPlainObject = require('../internal/isPlainObject');\n\nvar isSerializable,\n    isBoolean, isNumber, isString,\n    isDate, isRegExp, isFunction,\n    isArray, isSet, isMap, isError;\n\nfunction buildClassChecks() {\n\n  var knownTypes = {};\n\n  function addCoreTypes() {\n\n    var names = spaceSplit(NATIVE_TYPES);\n\n    isBoolean = buildPrimitiveClassCheck(names[0]);\n    isNumber  = buildPrimitiveClassCheck(names[1]);\n    isString  = buildPrimitiveClassCheck(names[2]);\n\n    isDate   = buildClassCheck(names[3]);\n    isRegExp = buildClassCheck(names[4]);\n\n    // Wanted to enhance performance here by using simply \"typeof\"\n    // but Firefox has two major issues that make this impossible,\n    // one fixed, the other not, so perform a full class check here.\n    //\n    // 1. Regexes can be typeof \"function\" in FF < 3\n    //    https://bugzilla.mozilla.org/show_bug.cgi?id=61911 (fixed)\n    //\n    // 2. HTMLEmbedElement and HTMLObjectElement are be typeof \"function\"\n    //    https://bugzilla.mozilla.org/show_bug.cgi?id=268945 (won't fix)\n    isFunction = buildClassCheck(names[5]);\n\n    // istanbul ignore next\n    isArray = Array.isArray || buildClassCheck(names[6]);\n    isError = buildClassCheck(names[7]);\n\n    isSet = buildClassCheck(names[8], typeof Set !== 'undefined' && Set);\n    isMap = buildClassCheck(names[9], typeof Map !== 'undefined' && Map);\n\n    // Add core types as known so that they can be checked by value below,\n    // notably excluding Functions and adding Arguments and Error.\n    addKnownType('Arguments');\n    addKnownType(names[0]);\n    addKnownType(names[1]);\n    addKnownType(names[2]);\n    addKnownType(names[3]);\n    addKnownType(names[4]);\n    addKnownType(names[6]);\n\n  }\n\n  function addArrayTypes() {\n    var types = 'Int8 Uint8 Uint8Clamped Int16 Uint16 Int32 Uint32 Float32 Float64';\n    forEach(spaceSplit(types), function(str) {\n      addKnownType(str + 'Array');\n    });\n  }\n\n  function addKnownType(className) {\n    var str = '[object '+ className +']';\n    knownTypes[str] = true;\n  }\n\n  function isKnownType(className) {\n    return knownTypes[className];\n  }\n\n  function buildClassCheck(className, globalObject) {\n    // istanbul ignore if\n    if (globalObject && isClass(new globalObject, 'Object')) {\n      return getConstructorClassCheck(globalObject);\n    } else {\n      return getToStringClassCheck(className);\n    }\n  }\n\n  // Map and Set may be [object Object] in certain IE environments.\n  // In this case we need to perform a check using the constructor\n  // instead of Object.prototype.toString.\n  // istanbul ignore next\n  function getConstructorClassCheck(obj) {\n    var ctorStr = String(obj);\n    return function(obj) {\n      return String(obj.constructor) === ctorStr;\n    };\n  }\n\n  function getToStringClassCheck(className) {\n    return function(obj, str) {\n      // perf: Returning up front on instanceof appears to be slower.\n      return isClass(obj, className, str);\n    };\n  }\n\n  function buildPrimitiveClassCheck(className) {\n    var type = className.toLowerCase();\n    return function(obj) {\n      var t = typeof obj;\n      return t === type || t === 'object' && isClass(obj, className);\n    };\n  }\n\n  addCoreTypes();\n  addArrayTypes();\n\n  isSerializable = function(obj, className) {\n    // Only known objects can be serialized. This notably excludes functions,\n    // host objects, Symbols (which are matched by reference), and instances\n    // of classes. The latter can arguably be matched by value, but\n    // distinguishing between these and host objects -- which should never be\n    // compared by value -- is very tricky so not dealing with it here.\n    return isKnownType(className) || isPlainObject(obj, className);\n  };\n\n}\n\nbuildClassChecks();\n\nmodule.exports = {\n  isSerializable: isSerializable,\n  isBoolean: isBoolean,\n  isNumber: isNumber,\n  isString: isString,\n  isDate: isDate,\n  isRegExp: isRegExp,\n  isFunction: isFunction,\n  isArray: isArray,\n  isSet: isSet,\n  isMap: isMap,\n  isError: isError\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}