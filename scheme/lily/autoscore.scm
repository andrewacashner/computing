;; autoscore.scm -- Andrew A. Cashner, 2015/07/18
;; Developing functions for autogenerating Lilypond code

;; TODO automate indentation
;; Aliases for boolean values for lyrics or function?
;; Add options for figured bass, incipitstaves, instrumentnames, staffgroup,
;; choirstaff, etc.			 
;; Read values from input file and/or set this up as part of script chain

;;*****************************************************************************

;; CREATE VOICES
;; Each voice is stored as a name plus a pair of booleans for including lyrics &
;; figures 
;; To access voice name, car; lyrics, cadr; figures, cddr
;; TODO reimplement with keywords?
(define (voice name)
  "Include only music, not lyrics or figures"
  (cons name (cons #f #f)))

(define (voice+lyrics name)
  "Include music, lyrics but not figures"
  (cons name (cons #t #f)))

(define (voice+figures name)
  "Include music, figures but not lyrics"
  (cons name (cons #f #t)))

(define (voice+lyrics+figures name)
  "Include music, lyrics, and figures"
  (cons name (cons #t #t)))

;; WRITE LILYPOND COMMANDS

;; Create parts of Lilypond commands
(define (lycommand name)
  "Return string with backlash + command"
  (string-concatenate
    (list "\\" name " ")))

(define (lycommand-combine part1 part2)
  "Combine two strings to make lycommand string (e.g., 'Music' + 'SI')"
  (lycommand (string-concatenate (list part1 part2))))

(define (enquote text)
  "Return string enclosed in quotation marks"
  (string-concatenate
    (list "\"" text "\"")))

(define (enbrace text)
  "Return string enclosed in curly braces {}"
  (string-concatenate
    (list "{ " text "}")))

(define start-ly-group "<<\n")
(define end-ly-group ">>\n")

;;; Indentation
; (define indent-char #\space)
; (define indent-width 2)
; 
; (define (indent degree)
;   "Return string of space characters * given degrees for indentation,
;   based on value of indent-width and indent-char"
;   (make-string (* indent-width degree) indent-char))

;;**********************

;; Staff (only the staff; the voice, lyrics, figures are defined separately)
;; TODO add optional instrumentname, incipitstaff
(define (new-staff contents)
  "Return string with new staff command including contents"
  (string-concatenate
    (list (lycommand "new") "Staff\n"
          start-ly-group
          contents
          end-ly-group)))

;; Voice
(define (new-voice name)
  "Return a string with new voice command using voicename in definition"
  (string-concatenate
    (list 
      (lycommand "new") "Voice = " (enquote name) " "
      (enbrace (lycommand-combine "Music" name)) "\n")))


;; Lyrics
;; TODO add optional alignAboveContext
(define (new-lyrics name)
  "Return a string with new lyrics command using voicename in definition"
  (string-concatenate
    (list 
      (lycommand "new") "Lyrics "
      (lycommand "lyricsto") (enquote name)
      (enbrace (lycommand-combine "Lyrics" name)) "\n")))

;; Figures
(define (new-figures name)
  "Return a string with new FiguredBass command using voicename in definition"
  (string-concatenate
    (list 
      (lycommand "new") "FiguredBass "
      (enbrace (lycommand-combine "Figures" name)) "\n")))

;; Create whole staff command and specify contents
;; The 'voice' is in the form '(name lyrics-bool . figures-bool) and is created
;; using the procedures 'voice', 'voice+lyrics', etc.
(define (make-ly-voice-staff voice)
  "Create a staff including voice plus lyrics and/or figures if requested"
  (let 
    ([voicename (car voice)] 
     [lyrics-bool (cadr voice)]
     [figures-bool (cddr voice)])
    [new-staff (string-concatenate 
        (list 
          (new-voice voicename)
          (if (eq? #t lyrics-bool) 
            (new-lyrics voicename)
            "") 
          (if (eq? #t figures-bool) 
            (new-figures voicename)
            "")))]))

(define autoscore-header-comment
  "%% File automatically generated by autoscore.scm\n")
(define ly-current-version "2.19")
(define ly-include "music.ly") ; TODO make a list that can be modified

(define (make-ly-score voicelist)
  "Return a string with a complete Lilypond score command for given voices"
  (string-concatenate
   (list
     autoscore-header-comment "\n"
     (lycommand "version") (enquote ly-current-version) "\n"
     (lycommand "include") (enquote ly-include) "\n"
     (lycommand "score") "{\n"
     start-ly-group
     (string-concatenate (map-in-order make-ly-voice-staff voicelist)) 
     end-ly-group
     "}\n")))


;; OUTPUT

;; To standard output
(define (displayln str)
  "Write a given string plus a newline."
  (begin (display str) (newline)))

;; To file
(define (write-file outfile str)
  "Write string to file, creating or overwriting file as needed"
  (let ((outfileport (open-file outfile "w")))
    (display str outfileport)
    (close-output-port outfileport)))

;; ONE COMMAND TO WRITE THE SCORE FILE
;; 'voices' should be defined as a list of names & booleans defined with, e.g.
;; (voice+lyrics arg):
;; For example:
;;   (define voices
;;     (list
;;       (voice+lyrics "Soprano")
;;       (voice+figures "Bass")))

(define (write-score outfile voices)
  "Append score command to file"
  (write-file outfile (make-ly-score voices)))


